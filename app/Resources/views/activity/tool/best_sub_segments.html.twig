{% extends "base_logged_in.twig" %}

{% import _self as this %}
{% import '_macro/leaflet.html.twig' as leaflet %}

{% macro tableCell(value, unit) %}
    {{ value|raw }} <small>{{ unit|raw }}</small>
{% endmacro %}

{% macro tableCellFor(value) %}
    {# @var value \Runalyze\Bundle\CoreBundle\Twig\DisplayableValue #}
    {{ value.value }} <small>{{ value.unit }}</small>
{% endmacro %}

{% macro tableRow(rowLabel, baseValue, pace, from, to, segmentType, segmentIndex) %}
    {% import _self as this %}

    <tr class="c" data-segment-index="{{ segmentIndex }}" data-segment-type="{{ segmentType }}">
        <td class="l"><strong>{{ rowLabel }}</strong></td>
        <td>{{ baseValue }}</td>
        <td>{{ this.tableCellFor(pace) }}</td>
        <td>{{ this.tableCellFor(distance(from)) }} - {{ this.tableCellFor(distance(to)) }}</td>
    </tr>
{% endmacro %}

{% block content %}
    <div class="panel-heading">
        <h1>{% trans %}Best sub segments{% endtrans %}</h1>
    </div>

    {# @var distanceSegments \Runalyze\Calculation\Math\SubSegmentMaximization #}
    {% set distanceSegments = statistics.distanceSegments %}
    {# @var timeSegments \Runalyze\Calculation\Math\SubSegmentMaximization #}
    {% set timeSegments = statistics.timeSegments %}

    <div class="panel-content">
        {% if map %}
        {{ leaflet.mapForAthlete("map-segments-" ~ activityId, activity.account) }}
        {% endif %}

        <table class="zebra-style more-padding fullwidth" id="best-sub-segment-table-{{ activityId }}">
            <thead>
            <tr>
                <th colspan="2">{% trans %}Best segment{% endtrans %}</th>
                <th>{% trans %}Pace{% endtrans %}</th>
                <th>{% trans %}Position{% endtrans %}</th>
            </tr>
            </thead>
            <tbody class="top-and-bottom-border">
            {% for i, distance in statistics.distances %}
                {% if distanceSegments.hasMaximumForLengthIndex(i) %}
                    {% set fromTo = distanceSegments.indizesOfMaximumForLengthIndex(i) %}
                    {% set achievedTime = distanceSegments.maximumForLengthIndex(i) %}

                    {{ this.tableRow(
                        this.tableCellFor(distance(distance)),
                        achievedTime|duration,
                        pace(achievedTime / distance, paceUnit),
                        distanceArray[fromTo[0]],
                        distanceArray[fromTo[1]],
                        "distance",
                        i
                    ) }}
                {% endif %}
            {% endfor %}
            </tbody>
            <tbody class="top-and-bottom-border">
            {% for i, time in statistics.times %}
                {% if timeSegments.hasMaximumForLengthIndex(i) %}
                    {% set fromTo = timeSegments.indizesOfMaximumForLengthIndex(i) %}
                    {% set achievedDistance = timeSegments.maximumForLengthIndex(i) %}

                    {{ this.tableRow(
                        time|date('H:i:s', false),
                        this.tableCellFor(distance(achievedDistance)),
                        pace(time / achievedDistance, paceUnit),
                        distanceArray[fromTo[0]],
                        distanceArray[fromTo[1]],
                        "time",
                        i
                    ) }}
                {% endif %}
            {% endfor %}
            </tbody>
        </table>

        {% if map %}
        <script>
            {{ map.js('RunalyzeLeaflet.get("map-segments-' ~ activityId ~ '")')|raw }}

            var $table = $("#best-sub-segment-table-{{ activityId }}");
            var segments = {{ segments|json_encode|raw }};
            var polyline = null;
            var fixed = false;
            var highlightSegment = function(row) {
                var index = row.attr('data-segment-index');
                var type = row.attr('data-segment-type');
                polyline = L.polyline(segments[type][index], {color: 'yellow'}).addTo(RunalyzeLeaflet.get('map-segments-{{ activityId }}').map());
            };
            var removeHighlight = function() {
                RunalyzeLeaflet.get('map-segments-{{ activityId }}').map().removeLayer(polyline);
            };

            $("tr[data-segment-index]").on("mouseover", function(){
                if (!fixed) {
                    highlightSegment($(this));
                }
            }).on("mouseout", function(){
                if (!fixed) {
                    removeHighlight();
                }
            }).on("click", function(){
                if (!fixed) {
                    $(this).addClass('highlight');
                    fixed = true;
                } else if ($(this).hasClass('highlight')) {
                    $(this).removeClass('highlight');
                    fixed = false;
                } else {
                    $table.find('.highlight').removeClass('highlight');
                    $(this).addClass('highlight');
                    removeHighlight();
                    highlightSegment($(this));
                }
            });
        </script>
        {% endif %}
    </div>
{% endblock %}
